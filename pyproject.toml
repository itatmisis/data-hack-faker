[tool.poetry]
name = "data-hack-faker"
version = "0.1.0"
description = "Python module for DATA HACK (https://data-hack.ru) hackathon to generate a ton of fake data"
authors = ["Артём Соседка <m1801239@edu.misis.ru>",
    "Илья Киселевский <ikiselewsk@yandex.ru>",
    "Максим Федотов <mvfedotov_1@edu.hse.ru>"]
readme = "README.md"
repository = "https://github.com/itatmisis/data-hack-faker"
packages = [
    { include = "data_hack_faker", from= "src" }
]


[tool.poetry.dependencies]
python = "^3.9"
pyspark = "^3.3.0"
factory-boy = "^3.2.1"
typer = "^0.6.1"
ujson = "^5.4.0"

[tool.poetry.dev-dependencies]
nox-poetry = "*"

# Testing.
pytest = "*"
pytest-cov = "*"
pytest-check = "*"
pytest-benchmark = "*"
pyspark-test = "*"

# Type Checking.
mypy = "*"

# Linting.
flake8 = "*"
flake8-bugbear = "*"
flake8-broken-line = "*"
flake8-comprehensions = "*"
pep8-naming = "*"
pyproject-flake8 = "*"

# Formatting.
black = "*"
isort = "*"

# Pre-commiting.
pre-commit = "*"

## Documentation.
#mkdocs-material = "*"
#mkdocs-htmlproofer-plugin = "*"
#mkdocstrings = { version = "*", extras = ["python"] }
### Autodoc.
#mkdocs-gen-files = "*"
#mkdocs-literate-nav = "*"

#[tool.poetry.scripts]
#fact = "data_hack_faker.cli:app"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
show_error_codes = true
ignore_missing_imports = true
strict = false
# If certain strict config options are too pedantic for a project,
# disable them selectively here by setting to false.

# Note: This configuration is suppported by pyproject-flake8.
[tool.flake8]
# Use the more relaxed max line length permitted in PEP 8.
max-line-length = 99
# This ignore is required by black.
extend-ignore = ["E203"]
# flake8-bugbear config.
# This argument is not needed if not using Typer as a dependency.
extend-immutable-calls = ["Argument"]

[tool.black]
line-length = 99
target-version = ["py37", "py38", "py39", "py310"]
# black will automatically exclude all files listed in .gitignore
# If you need to exclude additional folders, consider using extend-exclude to avoid disabling the
# default .gitignore behaviour.

[tool.isort]
profile = "black"
line_length = 99
force_sort_within_sections = true
# Inform isort of paths to import names that should be considered part of the "First Party" group.
src_paths = ["src/data-hack-faker"]
skip_gitignore = true
# If you need to skip/exclude folders, consider using skip_glob as that will allow the
# isort defaults for skip to remain without the need to duplicate them.

[tool.pytest.ini_options]
filterwarnings = [
    # When running tests, treat warnings as errors (e.g. -Werror).
    # See: https://docs.pytest.org/en/latest/reference/reference.html#confval-filterwarnings
    "error",
    # Add additional warning supressions as needed here. For example, if a third-party library
    # is throwing a deprecation warning that needs to be fixed upstream:
    "ignore::DeprecationWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning"
]

[tool.coverage.run]
branch = true
